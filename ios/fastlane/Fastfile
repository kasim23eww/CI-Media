default_platform(:ios)

TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
# TEMP_KEYCHAIN_USER = "login.keychain"
# TEMP_KEYCHAIN_PASSWORD = "Kasim@1234"
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
# APPLE_KEY_ID = "JN5KG8ZTUH"
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
# APPLE_ISSUER_ID = "69a6de82-a946-47e3-e053-5b8c7c11a4d1"
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
FIREBASE_TOKEN = ENV["FIREBASE_TOKEN"]
# FIREBASE_TOKEN = "1//0gfDQ0drF1qYKCgYIARAAGBASNwF-L9IrxJfOPto0UgVAbqrW-CoxfLT0UzheXbcvOgC4IbYGba7LS5rS9PeGHNh6redDfO3itSk"
APPLE_KEY_CONTENT = <<~EOS
  -----BEGIN PRIVATE KEY-----
  MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQg1jlqyHk6uBHN0lbu
  d02FsNzDFHCvzpR+Zxn1E5XDj22gCgYIKoZIzj0DAQehRANCAAT290K44xwxN4US
  hthqL8jnKCLWRaBAPoMB4A9ARYq0MJu3oDJDrZxDDiLMXS4/G7Kq6tcDdVCfMrc8
  /8iklnd/
  -----END PRIVATE KEY-----
EOS
# APP_IDENTIFIER = "com.example.social.app"
APP_IDENTIFIER = ENV["APP_IDENTIFIER"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )
    match(
      type: 'appstore',
      app_identifier: APP_IDENTIFIER,
      readonly: true,
      keychain_password: keychain_password,
      api_key: api_key
    )
    sync_code_signing
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "Runner.xcodeproj"
    )
    current_build_number = app_store_build_number(live: false)
    increment_build_number(xcodeproj: "Runner.xcodeproj", build_number: current_build_number + 1)

  # Upload to TestFlight with a proper changelog
  changelog = File.exist?("changelog.txt") ? File.read("changelog.txt") : "Bug fixes & improvements ðŸš€"
  build_app
  upload_to_testflight(
    changelog: changelog,
    skip_waiting_for_build_processing: true
  )
  end


  lane :firebase_beta do
      keychain_name = TEMP_KEYCHAIN_USER
      keychain_password = TEMP_KEYCHAIN_PASSWORD
      ensure_temp_keychain(keychain_name, keychain_password)

      api_key = app_store_connect_api_key(
        key_id: APPLE_KEY_ID,
        issuer_id: APPLE_ISSUER_ID,
        key_content: APPLE_KEY_CONTENT,
        duration: 1200,
        in_house: false
      )

      match(
        type: 'adhoc',
        app_identifier: APP_IDENTIFIER,
        readonly: true,
        keychain_password: keychain_password,
        api_key: api_key
      )

      sync_code_signing
      update_code_signing_settings(
        use_automatic_signing: false,
        path: "Runner.xcodeproj"
      )

      increment_version


      build_app(
        scheme: "Runner"
      )
    # Read testers and release notes from files
    testers_list = File.exist?("testers.txt") ? File.read("testers.txt").split("\n") : []
    release_notes = File.exist?("release_notes.txt") ? File.read("release_notes.txt") : "New build uploaded"


      firebase_app_distribution(
        app: "1:1025079123340:ios:5efe21b9dee41ee01acaa9",
        testers: testers_list.join(","),
        release_notes: release_notes,
      )
    end


    lane :increment_version do
      latest_release = firebase_app_distribution_get_latest_release(
        app: "1:1025079123340:ios:5efe21b9dee41ee01acaa9"
      )
      increment_build_number({ build_number: latest_release[:buildVersion].to_i + 1 })
    end
end
