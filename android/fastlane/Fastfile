default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

 desc "Run Flutter Doctor"
  lane :flutter_doctor do
    sh "./flutter/bin/flutter doctor"
  end


  desc "Increment Build Number"
   lane :increment_build_number do
     build_gradle_path = "android/app/build.gradle"

     # Read the current versionCode from build.gradle
     gradle_file = File.read(build_gradle_path)
     new_version_code = gradle_file.match(/versionCode (\d+)/)[1].to_i + 1

     # Replace the old versionCode with the new one
     updated_gradle = gradle_file.gsub(/versionCode \d+/, "versionCode #{new_version_code}")
     File.write(build_gradle_path, updated_gradle)

     UI.message("âœ… Updated versionCode to #{new_version_code}")
   end

   desc "Build the APK"
   lane :build do
     increment_build_number # Call the increment_build_number lane
     sh "gradle -v" # Print the Gradle version
     sh "java -version" # Print the Java version
     gradle(task: "assembleRelease", print_command: true, verbose: true)
   end

    desc "Deploy to Firebase App Distribution"
    lane :deploy do

      build
    # Read testers and release notes from files
    testers_list = File.exist?("testers.txt") ? File.read("testers.txt").split("\n") : []
    release_notes = File.exist?("release_notes.txt") ? File.read("release_notes.txt") : "New build uploaded"

      release = firebase_app_distribution(
        app: "1:1025079123340:android:4f0a4e23c3139c4a1acaa9",
        testers: testers_list.join(","),
        release_notes: release_notes,
        firebase_cli_token: ENV["FIREBASE_TOKEN"],
        firebase_cli_path: "/usr/local/bin/firebase",
        android_artifact_type: "APK",
        apk_path: "../build/app/outputs/flutter-apk/app-release.apk",
        verbose: true
      )
    end





end
